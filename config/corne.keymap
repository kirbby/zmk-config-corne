/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0  // layer shortcuts, must match order in which they are defined below
#define LOWER   1
#define RAISE   2

//&led_strip {
//    chain-length = <27>;
//};

&nice_view_spi { cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>; };

/ {
    combos {
        compatible = "zmk,combos";

        ESC_JK {
            bindings = <&kp ESC>;
            key-positions = <19 20>;
        };

        UE {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 7>;
        };

        AE {
            bindings = <&kp SQT>;
            key-positions = <13 3>;
        };

        OE {
            bindings = <&kp SEMICOLON>;
            key-positions = <3 22>;
        };
    };

    macros {
        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp C>;
            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp V>;
            label = "PASTE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp TAB         &kp Q  &kp W  &kp E      &kp R      &kp T          &kp Y            &kp U      &kp I         &kp O       &kp P          &kp DEL
&kp LEFT_ALT    &kp A  &kp S  &kp D      &kp F      &kp G          &kp H            &kp J      &kp K         &kp L       &kp SEMICOLON  &kp RIGHT_ALT
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C      &kp V      &kp B          &kp N            &kp M      &kp COMMA     &kp PERIOD  &kp SLASH      &kp RIGHT_WIN
                              &kp LCTRL  &kp SPACE  &lt 1 ENTER    &lt 2 BACKSPACE  &kp RSHFT  &kp LEFT_ALT
            >;
        };

        Numbers {
            bindings = <
&trans  &trans  &trans    &kp UP    &trans        &trans    &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans  &trans
&trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT     &trans    &trans  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans  &trans
&trans  &trans  &trans    &copy     &paste        &trans    &kp N0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
                          &trans    &kp LEFT_WIN  &trans    &trans  &kp LCTRL     &trans
            >;
        };

        Symbols {
            bindings = <
&kp TAB           &kp EXCLAMATION  &kp AT_SIGN  &kp HASH      &kp DOLLAR  &kp PERCENT    &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSPACE
&kp LEFT_CONTROL  &trans           &trans       &trans        &trans      &trans         &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp BACKSLASH          &kp GRAVE
&kp LEFT_SHIFT    &trans           &trans       &trans        &trans      &trans         &kp UNDERSCORE  &kp PLUS       &kp LEFT_BRACE    &kp RIGHT_BRACE       &kp PIPE               &kp TILDE
                                                &kp LEFT_GUI  &trans      &kp SPACE      &kp RETURN      &trans         &kp RIGHT_ALT
            >;
        };

        Func {
            bindings = <
&trans            &trans  &bl BL_DEC       &bl BL_INC       &bl BL_TOG       &trans    &trans  &trans      &trans      &trans  &trans  &trans
&trans            &trans  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG  &trans    &trans  &bt BT_NXT  &bt BT_PRV  &trans  &trans  &trans
&ext_power EP_ON  &trans  &trans           &trans           &trans           &trans    &trans  &trans      &trans      &trans  &trans  &bt BT_CLR
                                           &trans           &trans           &trans    &trans  &trans      &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Func_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
